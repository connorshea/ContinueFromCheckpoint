# This is an autogenerated file for dynamic methods in GamePurchase
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class GamePurchase::Relation < ActiveRecord::Relation
  include GamePurchase::NamedScope
  extend T::Generic
  Elem = type_member(fixed: GamePurchase)
end

class GamePurchase < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend GamePurchase::NamedScope
  Elem = type_template(fixed: GamePurchase)

  sig { returns(String) }
  def comments(); end

  sig { params(value: String).void }
  def comments=(value); end

  sig { returns(T::Boolean) }
  def completed?(); end

  sig { returns(T.nilable(Date)) }
  def completion_date(); end

  sig { params(value: T.nilable(Date)).void }
  def completion_date=(value); end

  sig { returns(String) }
  def completion_status(); end

  sig { params(value: T.nilable(T.any(Integer, String, Symbol))).void }
  def completion_status=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def dropped?(); end

  sig { returns(T::Boolean) }
  def fully_completed?(); end

  sig { returns(Game) }
  def game(); end

  sig { params(value: Game).void }
  def game=(value); end

  sig { returns(Integer) }
  def game_id(); end

  sig { params(value: Integer).void }
  def game_id=(value); end

  sig { returns(GamePurchasePlatform::Relation) }
  def game_purchase_platforms(); end

  sig { params(value: T.any(T::Array[GamePurchasePlatform], GamePurchasePlatform::Relation)).void }
  def game_purchase_platforms=(value); end

  sig { returns(T.nilable(Integer)) }
  def hours_played(); end

  sig { params(value: T.nilable(Integer)).void }
  def hours_played=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def in_progress?(); end

  sig { returns(T::Boolean) }
  def not_applicable?(); end

  sig { returns(T::Boolean) }
  def paused?(); end

  sig { returns(Platform::Relation) }
  def platforms(); end

  sig { params(value: T.any(T::Array[Platform], Platform::Relation)).void }
  def platforms=(value); end

  sig { returns(T.nilable(Integer)) }
  def rating(); end

  sig { params(value: T.nilable(Integer)).void }
  def rating=(value); end

  sig { returns(T.nilable(Date)) }
  def start_date(); end

  sig { params(value: T.nilable(Date)).void }
  def start_date=(value); end

  sig { returns(T::Boolean) }
  def unplayed?(); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(User) }
  def user(); end

  sig { params(value: User).void }
  def user=(value); end

  sig { returns(Integer) }
  def user_id(); end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.completion_statuses(); end

end


module GamePurchase::NamedScope
  extend T::Sig

  sig { returns(GamePurchase::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def completed(*args); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def dropped(*args); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def fully_completed(*args); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def in_progress(*args); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def not_applicable(*args); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def paused(*args); end

  sig { params(args: T.untyped).returns(GamePurchase::Relation) }
  def unplayed(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GamePurchase::Relation) }
  def except(*args, block); end

end

