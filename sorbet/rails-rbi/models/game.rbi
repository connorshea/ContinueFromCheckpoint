# This is an autogenerated file for dynamic methods in Game
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Game::Relation < ActiveRecord::Relation
  include Game::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Game)
end

class Game < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Game::NamedScope
  Elem = type_template(fixed: Game)

  sig { returns(T.nilable(ActiveStorage::Attachment)) }
  def cover_attachment(); end

  sig { params(value: T.nilable(ActiveStorage::Attachment)).void }
  def cover_attachment=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def cover_blob(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def cover_blob=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(String) }
  def description(); end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(Company::Relation) }
  def developers(); end

  sig { params(value: T.any(T::Array[Company], Company::Relation)).void }
  def developers=(value); end

  sig { returns(Engine::Relation) }
  def engines(); end

  sig { params(value: T.any(T::Array[Engine], Engine::Relation)).void }
  def engines=(value); end

  sig { returns(FavoriteGame::Relation) }
  def favorites(); end

  sig { params(value: T.any(T::Array[FavoriteGame], FavoriteGame::Relation)).void }
  def favorites=(value); end

  sig { returns(GameDeveloper::Relation) }
  def game_developers(); end

  sig { params(value: T.any(T::Array[GameDeveloper], GameDeveloper::Relation)).void }
  def game_developers=(value); end

  sig { returns(GameEngine::Relation) }
  def game_engines(); end

  sig { params(value: T.any(T::Array[GameEngine], GameEngine::Relation)).void }
  def game_engines=(value); end

  sig { returns(GameGenre::Relation) }
  def game_genres(); end

  sig { params(value: T.any(T::Array[GameGenre], GameGenre::Relation)).void }
  def game_genres=(value); end

  sig { returns(GamePlatform::Relation) }
  def game_platforms(); end

  sig { params(value: T.any(T::Array[GamePlatform], GamePlatform::Relation)).void }
  def game_platforms=(value); end

  sig { returns(GamePublisher::Relation) }
  def game_publishers(); end

  sig { params(value: T.any(T::Array[GamePublisher], GamePublisher::Relation)).void }
  def game_publishers=(value); end

  sig { returns(GamePurchase::Relation) }
  def game_purchases(); end

  sig { params(value: T.any(T::Array[GamePurchase], GamePurchase::Relation)).void }
  def game_purchases=(value); end

  sig { returns(Genre::Relation) }
  def genres(); end

  sig { params(value: T.any(T::Array[Genre], Genre::Relation)).void }
  def genres=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(String)) }
  def mobygames_id(); end

  sig { params(value: T.nilable(String)).void }
  def mobygames_id=(value); end

  sig { returns(String) }
  def name(); end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(String)) }
  def pcgamingwiki_id(); end

  sig { params(value: T.nilable(String)).void }
  def pcgamingwiki_id=(value); end

  sig { returns(T.nilable(PgSearch::Document)) }
  def pg_search_document(); end

  sig { params(value: T.nilable(PgSearch::Document)).void }
  def pg_search_document=(value); end

  sig { returns(Platform::Relation) }
  def platforms(); end

  sig { params(value: T.any(T::Array[Platform], Platform::Relation)).void }
  def platforms=(value); end

  sig { returns(Company::Relation) }
  def publishers(); end

  sig { params(value: T.any(T::Array[Company], Company::Relation)).void }
  def publishers=(value); end

  sig { returns(User::Relation) }
  def purchasers(); end

  sig { params(value: T.any(T::Array[User], User::Relation)).void }
  def purchasers=(value); end

  sig { returns(T.nilable(Series)) }
  def series(); end

  sig { params(value: T.nilable(Series)).void }
  def series=(value); end

  sig { returns(T.nilable(Integer)) }
  def series_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def series_id=(value); end

  sig { returns(T.nilable(Integer)) }
  def steam_app_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def steam_app_id=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T.nilable(Integer)) }
  def wikidata_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def wikidata_id=(value); end

end


module Game::NamedScope
  extend T::Sig

  sig { returns(Game::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def least_recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def most_favorites(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def most_owners(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def newest(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def oldest(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def on_platform(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::Relation) }
  def with_attached_cover(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::Relation) }
  def except(*args, block); end

end

